diff --git a/components/Image.astro b/components/Image.astro
index b84bcacf7a41cb7842016c789e3a75132b1348f0..e5d2908aa20c35ad1789e47b0e9b9ae6f262b0ba 100644
--- a/components/Image.astro
+++ b/components/Image.astro
@@ -9,7 +9,7 @@ export type Props = Omit<astroHTML.JSX.ImgHTMLAttributes, "src" | "name"> & {
      * Name of the image.
      *
      * This will be the name of the resulting file, so include it with extension if you want to access it later.
-     * 
+     *
      * If not provided astro-preload will try to infer it from the URL.
      *
      * # Example
@@ -60,16 +60,25 @@ if (!props.width && !props.height) {
 // Download only on production to avoid downloading multiple times
 if (process.env.NODE_ENV === "production" && !url.startsWith("/")) {
     try {
-        const response = await fetch(url);
-        const blob = await response.blob();
-        fs.mkdirSync("public/assets/preloaded", { recursive: true });
-        fs.writeFileSync(
-            `public/assets/preloaded/${name}`,
-            new Uint8Array(await blob.arrayBuffer())
-        );
-        console.log(
-            `[astro-preload]: Downloaded image ${name} into public/assets/preloaded/${name}`
-        );
+        const preloadDir = "public/assets/preloaded";
+        const path = `${preloadDir}/${name}`;
+
+        if (!fs.existsSync(path)) {
+            if (!fs.existsSync(preloadDir)){
+                fs.mkdirSync(preloadDir, { recursive: true });
+            }
+            const response = await fetch(url);
+            const blob = await response.blob();
+
+            fs.writeFileSync(
+                path,
+                new Uint8Array(await blob.arrayBuffer())
+            );
+            console.log(
+                `[astro-preload]: Downloaded image ${name} into ${path}`
+            );
+        }
+
         url = import.meta.env.BASE_URL + `assets/preloaded/${name}`;
     } catch {
         console.log(